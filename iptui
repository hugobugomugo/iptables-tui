#!/bin/env bash

#make screen not blue
trap "clear; reset; stty sane" EXIT

if ! command -v fzf &>/dev/null || ! command -v dialog &>/dev/null; then
    echo "fzf and/or dialog is missing"
    exit 1
fi

view_rules() {
    iptables -vnL | less
}

add_rule() {
    while true; do
        CHAIN=$(dialog --menu "Select chain:" 15 40 4 \
            INPUT "Inbound Traffic" \
            OUTPUT "Outbound Traffic" \
            FORWARD "Forwarded Traffic" \
            BACK "Go Back" 2>&1 >/dev/tty)
        [[ "$CHAIN" == "BACK" || -z "$CHAIN" ]] && return

        PROTOCOL=$(dialog --menu "Select protocol:" 15 40 4 \
            tcp "TCP" \
            udp "UDP" \
            all "All Protocols" \
            BACK "Go Back" 2>&1 >/dev/tty)
        [[ "$PROTOCOL" == "BACK" || -z "$PROTOCOL" ]] && continue

        SOURCE=$(dialog --inputbox "Enter source IP (leave blank for any):" 10 40 2>&1 >/dev/tty)
        [[ "$SOURCE" == "BACK" ]] && continue
        [[ -n "$SOURCE" ]] && SOURCE_RULE="-s $SOURCE" || SOURCE_RULE=""

        DESTINATION=$(dialog --inputbox "Enter destination IP (leave blank for any):" 10 40 2>&1 >/dev/tty)
        [[ "$DESTINATION" == "BACK" ]] && continue
        [[ -n "$DESTINATION" ]] && DEST_RULE="-d $DESTINATION" || DEST_RULE=""

        PORT=$(dialog --inputbox "Enter port number (leave blank for any):" 10 40 2>&1 >/dev/tty)
        [[ "$PORT" == "BACK" ]] && continue
        [[ -n "$PORT" ]] && PORT_RULE="--dport $PORT" || PORT_RULE=""

        STATE=$(dialog --checklist "Select connection state (optional):" 15 50 5 \
            NEW "New connections" off \
            ESTABLISHED "Existing connections" off \
            RELATED "Related to an existing connection" off \
            INVALID "Unidentifiable traffic" off \
            BACK "Go Back" off 2>&1 >/dev/tty)
        [[ "$STATE" == "BACK" ]] && continue
        [[ -n "$STATE" ]] && STATE_RULE="-m conntrack --ctstate $(echo $STATE | tr -d '\"' | tr ' ' ',')" || STATE_RULE=""

        ACTION=$(dialog --menu "Select action:" 15 40 4 \
            ACCEPT "Allow" \
            DROP "Deny" \
            REJECT "Reject" \
            BACK "Go Back" 2>&1 >/dev/tty)
        [[ "$ACTION" == "BACK" || -z "$ACTION" ]] && continue

        RULE="-A $CHAIN $SOURCE_RULE $DEST_RULE $STATE_RULE"
        [[ "$PROTOCOL" != "all" ]] && RULE="$RULE -p $PROTOCOL"
        [[ -n "$PORT_RULE" && "$PROTOCOL" != "all" ]] && RULE="$RULE $PORT_RULE"
        RULE="$RULE -j $ACTION"

        dialog --yesno "Apply rule: iptables $RULE?" 10 50
        if [[ $? -eq 0 ]]; then
            iptables $RULE
        fi
    done
}

delete_rule() {
    if ! command -v dialog &>/dev/null; then
        echo "Error: 'dialog' is not installed. Install it and try again."
        return 1
    fi

    TMPFILE=$(mktemp)
    declare -a DIALOG_OPTIONS=()
    declare -A RULE_INFO=()

    while IFS= read -r line; do
        if [[ "$line" =~ ^Chain\ ([A-Z]+) ]]; then
            CURRENT_CHAIN="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ ^[[:space:]]*([0-9]+)[[:space:]] ]]; then
            LINE_NUM="${BASH_REMATCH[1]}"
            RULE_DESC=$(echo "$line" | awk '{$1=""; print $0}' | sed 's/^[[:space:]]*//;s/[[:space:]]\+/ /g')
            ID="${CURRENT_CHAIN}:${LINE_NUM}"

            RULE_INFO["$ID"]="$CURRENT_CHAIN|$LINE_NUM"

            SHORT_DESC=$(echo "$RULE_DESC" | cut -c1-70)
            DIALOG_OPTIONS+=("$ID" "$CURRENT_CHAIN: $SHORT_DESC" "off")
        fi
    done < <(iptables -L -n --line-numbers)

    if [[ ${#DIALOG_OPTIONS[@]} -eq 0 ]]; then
        dialog --msgbox "No iptables rules found to delete." 8 50
        return 0
    fi

    dialog --checklist "Select iptables rules to delete:" 20 100 15 \
        "${DIALOG_OPTIONS[@]}" 2> "$TMPFILE"

    RET=$?
    if [[ $RET -ne 0 ]]; then
        echo "User cancelled."
        rm -f "$TMPFILE"
        return 1
    fi

    SELECTED_IDS=$(<"$TMPFILE")
    rm -f "$TMPFILE"

    declare -A TO_DELETE=()

    for ID in $SELECTED_IDS; do
        ID="${ID//\"/}"
        IFS="|" read -r chain line_num <<< "${RULE_INFO[$ID]}"
        TO_DELETE["$chain"]+="$line_num"$'\n'
    done

    for chain in "${!TO_DELETE[@]}"; do
        while IFS= read -r num; do
            [[ -n "$num" ]] && {
                echo "Deleting rule $num from $chain"
                iptables -D "$chain" "$num"
            }
        done < <(printf "%s" "${TO_DELETE[$chain]}" | sort -nr)
    done

    dialog --msgbox "Selected rules deleted." 6 40
}

save_rules() {
    iptables-save | sudo tee /etc/iptables/rules.v4
    dialog --msgbox "Rules saved!" 5 30
}

while true; do
    CHOICE=$(dialog --clear --title "iptables Manager" --menu "Choose an option:" 15 50 7 \
    1 "View Rules" \
    2 "Add Rule" \
    3 "Delete Rule" \
    4 "Save Rules" \
    5 "Exit" 2>&1 >/dev/tty)

    case $CHOICE in
        1) view_rules ;;
        2) add_rule ;;
        3) delete_rule ;;
        4) save_rules ;;
        5) exit 0 ;;
    esac
done
